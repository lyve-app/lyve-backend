// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id
  username   String
  dispname   String
  email      String   @unique
  avatar_url String?
  bio        String   @default("")
  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  followerCount   Int   @default(0)
  followingCount  Int   @default(0)
  numStreams      Int   @default(0)
  num10minStreams Int   @default(0)
  minStreamed     Float @default(0)

  level           Int @default(1)
  promotionPoints Int @default(0)
  coins           Int @default(0)

  streams Stream[]

  following  Follows[] @relation("followedBy")
  followedBy Follows[] @relation("following")

  notifications     Notification[]
  userToAchievement UserToAchievement[]
  receivedRewards   Rewards[]
}

model Follows {
  followedBy   User     @relation("followedBy", fields: [followedById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followedById String
  following    User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId  String
  created_at   DateTime @default(now())

  @@id([followingId, followedById])
}

model Stream {
  id            String  @id @default(cuid())
  serverId      String?
  active        Boolean @default(false)
  streamer      User    @relation(fields: [streamerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  streamerId    String
  viewerCount   Int     @default(0)
  previewImgUrl String

  created_at DateTime  @default(now())
  ended_at   DateTime?
  duration   Float     @default(0) // in seconds

  genre String
}

model Notification {
  id   String           @id @default(cuid())
  type NotificationType

  streamId          String?
  userWhoFiredEvent String?

  recipient   User     @relation(fields: [recipientId], references: [id])
  recipientId String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Achievement {
  id                String              @id
  type              AchievementType
  name              String
  level             Int                 @default(0)
  bannerUrl         String
  condition         Int
  progress          Int // progress to condition 1/10 progress/condition
  promotionPoints   Int // promotionPoints a user receives for reaching the achievement
  userToAchievement UserToAchievement[]
}

model UserToAchievement {
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  achievementId String
  created_at    DateTime    @default(now())

  @@id([userId, achievementId])
}

model Rewards {
  id         String     @id @default(uuid())
  type       RewardType
  points     Int
  receiver   User       @relation(fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverId String
  senderId   String
  created_at DateTime   @default(now())
}

enum RewardType {
  popsicle
  pizza
  gift
  rocket
  star
  cake
  crown
  heart
  bouquet
  lucky_cat
}

enum AchievementType {
  NTH_STREAM
  NTH_VIEWERS
}

enum NotificationType {
  STREAM_STARTED
  REWARD_RECEIVED
  ACHIEVEMENT_RECEIVED
  NEW_FOLLOWER
}
